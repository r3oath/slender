// Generated by CoffeeScript 1.4.0
(function() {
  var EditTagCallback, FilterByType, SetStatusBar, ShowTagCallback, ToggleTagArea, statusBar, tagArea, updatedTagNotice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = {
    Models: {},
    Views: {},
    Collections: {},
    Router: {},
    RouteFuncs: {},
    Actions: {}
  };

  window.vent = _.extend({}, Backbone.Events);

  window.template = function(id) {
    return _.template($('#' + id).html());
  };

  tagArea = $('#tag-area');

  statusBar = $('#status-bar');

  updatedTagNotice = $('#updated-tag-notice');

  App.Models.Tag = (function(_super) {

    __extends(Tag, _super);

    function Tag() {
      return Tag.__super__.constructor.apply(this, arguments);
    }

    Tag.prototype.urlRoot = 'tags';

    Tag.prototype.defaults = {
      'contents': '',
      'alt': '',
      'description': '',
      'type': '',
      'error': ''
    };

    return Tag;

  })(Backbone.Model);

  App.Views.Tag = (function(_super) {

    __extends(Tag, _super);

    function Tag() {
      return Tag.__super__.constructor.apply(this, arguments);
    }

    Tag.prototype.events = {
      'click': 'tagClicked',
      'click .delete-tag': 'deleteMe'
    };

    Tag.prototype.tagClicked = function() {
      return window.vent.trigger('gotoEditTag', this.model.get('id'));
    };

    Tag.prototype.deleteMe = function(e) {
      e.stopImmediatePropagation();
      if (confirm('This will delete the tag and/or reset the associated content.') === true) {
        this.$el.fadeOut();
        return this.model.destroy();
      }
    };

    Tag.prototype.template = template('tagTemplate');

    Tag.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return Tag;

  })(Backbone.View);

  App.Views.NewTag = (function(_super) {

    __extends(NewTag, _super);

    function NewTag() {
      return NewTag.__super__.constructor.apply(this, arguments);
    }

    NewTag.prototype.events = {
      'click': 'tagClicked',
      'click .delete-tag': 'deleteMe'
    };

    NewTag.prototype.tagClicked = function() {
      return window.vent.trigger('gotoEditTag', this.model.get('id'));
    };

    NewTag.prototype.deleteMe = function(e) {
      e.stopImmediatePropagation();
      return alert('Deleted tag');
    };

    NewTag.prototype.template = template('tagTemplateNew');

    NewTag.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return NewTag;

  })(Backbone.View);

  App.Views.Tags = (function(_super) {

    __extends(Tags, _super);

    function Tags() {
      return Tags.__super__.constructor.apply(this, arguments);
    }

    Tags.prototype.render = function() {
      this.collection.each(this.addOne, this);
      return this;
    };

    Tags.prototype.addOne = function(tag) {
      var modelView;
      if (tag.get('enabled') === 1) {
        modelView = new App.Views.Tag({
          model: tag
        });
      } else {
        modelView = new App.Views.NewTag({
          model: tag
        });
      }
      return this.$el.append(modelView.render().el);
    };

    return Tags;

  })(Backbone.View);

  App.Views.EditTag = (function(_super) {

    __extends(EditTag, _super);

    function EditTag() {
      return EditTag.__super__.constructor.apply(this, arguments);
    }

    EditTag.prototype.events = {
      'click #save-tag': 'saveTag'
    };

    EditTag.prototype.saveTag = function() {
      $('#save-tag').attr('disabled', 'disabled');
      this.model.set('contents', $('#markitup').val());
      this.model.set('enabled', 1);
      this.model.save();
      return window.vent.trigger('gotoUpdatedTags');
    };

    EditTag.prototype.template = template('editTagTemplate');

    EditTag.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return EditTag;

  })(Backbone.View);

  App.Views.EditImageTag = (function(_super) {

    __extends(EditImageTag, _super);

    function EditImageTag() {
      return EditImageTag.__super__.constructor.apply(this, arguments);
    }

    EditImageTag.prototype.events = {
      'click #save-tag': 'saveTag'
    };

    EditImageTag.prototype.saveTag = function() {
      $('#save-tag').attr('disabled', 'disabled');
      this.model.set('contents', $('#image-contents').val());
      this.model.set('alt', $('#image-alt').val());
      this.model.set('enabled', 1);
      this.model.save();
      return window.vent.trigger('gotoUpdatedTags');
    };

    EditImageTag.prototype.template = template('editImageTagTemplate');

    EditImageTag.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return EditImageTag;

  })(Backbone.View);

  App.Collections.Tags = (function(_super) {

    __extends(Tags, _super);

    function Tags() {
      return Tags.__super__.constructor.apply(this, arguments);
    }

    Tags.prototype.model = App.Models.Tag;

    Tags.prototype.url = 'tags';

    return Tags;

  })(Backbone.Collection);

  App.Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.initialize = function() {
      window.vent.on('gotoEditTag', this.gotoEditTag, this);
      window.vent.on('gotoUpdatedTags', this.gotoUpdatedTags, this);
      window.vent.on('gotoShowTags', this.gotoShowTags, this);
      return window.vent.on('gotoFilterTags', this.gotoFilterTags, this);
    };

    Router.prototype.routes = {
      '': 'showTags',
      'edit/:id': 'editTag',
      'filter/:id': 'filterTags'
    };

    Router.prototype.gotoUpdatedTags = function() {
      this.navigate('');
      return this.updatedTags();
    };

    Router.prototype.updatedTags = function() {
      SetStatusBar('Displaying all Tags');
      return ToggleTagArea(ShowTagCallback(1));
    };

    Router.prototype.gotoShowTags = function() {
      return this.navigate('', {
        trigger: true
      });
    };

    Router.prototype.showTags = function() {
      SetStatusBar('Displaying all Tags');
      return ToggleTagArea(ShowTagCallback());
    };

    Router.prototype.gotoEditTag = function(id) {
      return this.navigate('edit/' + id, {
        trigger: true
      });
    };

    Router.prototype.editTag = function(id) {
      SetStatusBar('Editing Tag ID: ' + id);
      return ToggleTagArea(EditTagCallback(id));
    };

    Router.prototype.gotoFilterTags = function(tagType) {
      return this.navigate('filter/' + tagType, {
        trigger: true
      });
    };

    Router.prototype.filterTags = function(id) {
      SetStatusBar('Displaying all ' + id + ' Tags');
      return ToggleTagArea(FilterByType(id));
    };

    return Router;

  })(Backbone.Router);

  ToggleTagArea = function(callback) {
    if (callback == null) {
      callback = function() {};
    }
    return tagArea.stop(true, true).animate({
      height: 'toggle',
      opacity: 'toggle'
    }, callback);
  };

  SetStatusBar = function(status) {
    return statusBar.html(status);
  };

  ShowTagCallback = function(updated) {
    var Tags;
    if (updated == null) {
      updated = 0;
    }
    Tags = new App.Collections.Tags;
    return Tags.fetch({
      success: function() {
        var TagsView;
        if (Tags.length === 0) {
          tagArea.html('<div class="error">There are currently no tags available. Start tagging!<div>');
          return ToggleTagArea();
        } else {
          TagsView = new App.Views.Tags({
            collection: Tags
          });
          tagArea.html(TagsView.render().el);
          ToggleTagArea();
          if (updated === 1) {
            return updatedTagNotice.fadeIn().delay(2000).fadeOut();
          }
        }
      }
    });
  };

  EditTagCallback = function(id) {
    var Tag;
    Tag = new App.Models.Tag;
    Tag.set('id', id);
    return Tag.fetch({
      success: function() {
        var TagView;
        if (Tag.get('error') !== '') {
          tagArea.html('<div class="error">' + Tag.get('error') + '<div>');
          return ToggleTagArea();
        } else {
          if (Tag.get('type') !== 'image') {
            TagView = new App.Views.EditTag({
              model: Tag
            });
            tagArea.html(TagView.render().el);
            if (Tag.get('type') === 'html') {
              $("#markitup").markItUp(mySettings);
            }
          } else {
            TagView = new App.Views.EditImageTag({
              model: Tag
            });
            tagArea.html(TagView.render().el);
          }
          return ToggleTagArea();
        }
      }
    });
  };

  FilterByType = function(tagType) {
    var Tags;
    Tags = new App.Collections.Tags;
    return Tags.fetch({
      success: function() {
        var TagsView;
        if (Tags.length === 0) {
          tagArea.html('<div class="error">There are currently no tags available. Start tagging!<div>');
          return ToggleTagArea();
        } else {
          Tags.reset(Tags.where({
            type: tagType
          }));
          if (Tags.length !== 0) {
            TagsView = new App.Views.Tags({
              collection: Tags
            });
            tagArea.html(TagsView.render().el);
          } else {
            tagArea.html('<div class="error">There are currently no ' + tagType + ' tags.<div>');
          }
          return ToggleTagArea();
        }
      }
    });
  };

  new App.Router;

  Backbone.history.start();

}).call(this);
